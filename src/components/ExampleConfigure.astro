---
const { componentName } = Astro.props;

import { NucleusComponentRenderer } from './NucleusComponentRenderer';
import { NucleusCodeSnippet } from './NucleusCodeSnippet';

import customElements from '@connectedhomes/nucleus/ce-doc.json';
import cesm from '@connectedhomes/nucleus/custom-elements.json';
import { iconOptions, illustrationOptions } from '@scripts/assets';

const customElement = customElements.find((customElement) => customElement.name === componentName);
const cem = cesm.tags.find((tag) => tag.name === componentName);
const htmlContent = Astro.props.src;

const attributes = cem?.attributes;
const typeAttributeIndex = attributes?.findIndex((attribute) => attribute.name === 'type');
const typeAttribute = attributes?.splice(typeAttributeIndex, 1);
attributes?.splice(0, 0, typeAttribute[0]);

---
<script>
  function populateConfig() {
    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    if (componentElement) {
      const atts = componentElement.attributes;
      const childrens = componentElement.children;
      const slotMap = {
        default: []
      };

      Array.from(atts).forEach((attr) => {
        const attrElements = document.querySelectorAll(`.config-elements [name=${attr.nodeName}]`);
        if (attrElements?.length === 1) {
          attrElements[0].setAttribute('value', attr.nodeValue ?? attrElements[0].defaultValue);
          if (attrElements[0].nodeName === 'SELECT') {
            const current = attrElements[0].querySelector(`option[selected]`);
            current?.removeAttribute('selected');
            const option = attrElements[0].querySelector(`option[value='${attr.nodeValue}']`);
            option?.setAttribute('selected', 'true');
          }

        } else if (attrElements?.length > 1) {
          Array.from(attrElements).
          filter((attrElement) => attrElement.value === attr.nodeValue).
          forEach((attrElement) => attrElement.checked = true);
        }
      });

      Array.from(childrens)?.forEach(element => {
        let slotName = element.getAttribute('slot') || 'default';
        if (!slotMap[slotName]) {
          slotMap[slotName] = [];
        }
        slotMap[slotName].push(element);
      });

      const slottedElements = document.querySelectorAll(`.slot-elements textarea`);
      slottedElements?.forEach((slottedElement) => {
        const slotValue = slotMap[slottedElement.name]?.map(element => element.outerHTML).join('');
        slottedElement.value = slotValue || '';
      });
    }
  }

  function updateComponents(htmlSnippet: string) {

    if (!htmlSnippet) {
      const componentElement = document.querySelector('.config-content')?.firstElementChild;
      const componentCopy = componentElement?.cloneNode(true);
      htmlSnippet = componentCopy.outerHTML;
    }
    const exampleRenderer = document.querySelector('example-view');
    if (exampleRenderer) {
      exampleRenderer.src = htmlSnippet;
      exampleRenderer.requestUpdate();
    }

    const codeSnippet = document.querySelector('code-snippet');
    if (codeSnippet) {
      codeSnippet.src = htmlSnippet;
    }
  }

  const inputs = document.querySelectorAll('input, textarea, select');
  Array.from(inputs).forEach((input) => {
    input.addEventListener('change', (event) => {
      if(input.type === 'radio') {
        const allOptions = document.querySelectorAll(`input[name="${input.name}"]`);
        allOptions?.forEach((option) => {
          if(option.value === event.target.value) {
            option.classList.add('changed');
          } else {
            option.classList.remove('changed');
          }
        });
      } else {
        input.classList.add('changed');
      }
    });
  });

  window.addEventListener('load', () => populateConfig());

  document.getElementById('reset-config')?.addEventListener('click', (ev) => {
    ev.preventDefault();
    const form = document.querySelector('form');
    if (form) {
      form.reset();
    }
    const changedElements = document.querySelectorAll('.config-elements .changed');
    changedElements?.forEach(element => element.classList?.remove('changed'));

    populateConfig();

    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    const componentCopy = componentElement?.cloneNode(true);
    const tempContainer = document.createElement("div");
    tempContainer.appendChild(componentCopy);

    updateComponents(tempContainer.innerHTML);
    
  });
  
  document.getElementById('play-config')?.addEventListener('click', (ev) => {
    ev.preventDefault();
    const changedElements = document.querySelectorAll('.config-elements .changed');
    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    const componentCopy = componentElement?.cloneNode(true);
    const tempContainer = document.createElement("div");
    tempContainer.appendChild(componentCopy);

    changedElements?.forEach((changedElement) => {
      if(changedElement.value !== 'false') {
        componentCopy.setAttribute(changedElement.name, changedElement.value);
      } else {
        componentCopy.removeAttribute(changedElement.name);
      }
    });

    const slottedElements = document.querySelectorAll('.slot-elements textarea');
    const slottedValue = [];
    slottedElements?.forEach((slottedElement) => {
      const attrValue = slottedElement.value;
      slottedValue.push(attrValue);
    });
    componentCopy.innerHTML = slottedValue.join('');
    updateComponents(tempContainer.innerHTML);
  });
</script>

<div class="config-content" set:html={htmlContent}></div>

<div class="configure">
  <h2>Configuration</h2>
  <form class="form">
    <div class="action">
      <button class="button primary run" id="play-config">Run</button>
      <button class="button reset" id="reset-config">Reset</button>
    </div>
  {
    cem?.attributes && (
      <h3>Attributes</h3>
    )
  }
  {
    cem?.attributes?.map((attribute) => {
      const defaultValue = attribute.default?.replaceAll('"', '');
      if (attribute.type === 'string') {
        if (attribute.name === 'icon' || (componentName === 'ns-icon' && attribute.name === 'name') || (componentName !== 'ns-icon' && attribute.description?.includes('icon'))) {
          return (
            <div class="config-elements">
              <label>{attribute.name}</label>
              <select name={attribute.name}>
                {
                  iconOptions()?.map((icon) => {
                    const selected = icon.name === defaultValue ? 'selected' : undefined;
                    return (<option value={icon.name} {selected}>{icon.name}</option>);
                  })
                }
              </select>
            </div>
          );
        } else if (attribute.name === 'illustration' || (componentName === 'ns-illustration' && attribute.name === 'name') || (componentName !== 'ns-illustration' && attribute.description?.includes('illustration'))) {
          return (
            <div class="config-elements">
              <label>{attribute.name}</label>
              <select name={attribute.name}>
                {
                  illustrationOptions()?.map((illustration) => {
                    const selected = illustration.name === defaultValue ? 'selected' : undefined;
                    return (<option value={illustration.name} {selected}>{illustration.name}</option>);
                  })
                }
              </select>
            </div>
          );
        } else {
          return (
            <div class="config-elements">
              <label>{attribute.name}</label>
              <input type="text" name={attribute.name} value={defaultValue}>
            </div>
          );
        }
      } else if (attribute.type?.indexOf("|") > -1) {
        const options = attribute.type?.replaceAll('"', '').split('|') ?? [];
        const attributeTitle = (<label>{attribute.name}</label>);

        const optionsHTML = options?.map((option) => {
          const checked = defaultValue === option ? '' : undefined;
          return (
            <div class="radio-element">
              <label><input type="radio" name={attribute.name} value={option ?? " "} {checked}> {option ? option : "empty"}</label>
            </div>
          );
        });
        return (
          <div class="config-elements">
            {attributeTitle}
            <span class="options">{optionsHTML}</span>
          </div>
        );
      } else if (attribute.type === 'number') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="number" name={attribute.name} value={defaultValue}>
          </div>
        );
      } else if (attribute.type === 'boolean') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <span class="options">
              {
                ['true', 'false'].map((option) => {
                  const checked = defaultValue === option ? true : false;
                  return (
                  <div class="radio-element">
                    <label><input type="radio" name={attribute.name} value={option} {checked}> {option}</label>
                  </div>
                  )
                })
              }
            </span>
          </div>
        );
      } else if (attribute.type === 'Array') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="text" name={attribute.name} />
          </div>
        );
      }
    })
  }
  {
    cem.slots && (
      <h3>Slots</h3>
    )
  }
  {
    cem.slots?.map((slot) => {
      return (
        <div class="slot-elements">
          <label>{slot.name !== '' ? slot.name : 'Anonymous slot' }</label>
          <textarea name={slot.name !== '' ? slot.name : 'default'}></textarea>
        </div>
      );
    })
  }
  </form>
  </div>

  <div class="preview">
    <h2>Preview</h2>
    <NucleusComponentRenderer src={htmlContent} name={componentName} zoom="100" client:visible/>
    <NucleusCodeSnippet src={htmlContent} hide-top-radius client:visible/>
  </div>


<style>
  .config-content {
    display: none;
  }

  .configure {
    .form {
      background-color: var(--sl-color-bg-nav);
      border-radius: 0.5rem;
      padding: 1rem;
    }
  }

.form {
  display: grid;
  gap: 1rem;

  & :is(
  input[type="date"],
  input[type="email"],
  input[type="number"],
  input[type="password"],
  input[type="search"],
  input[type="tel"],
  input[type="text"],
  select,
  textarea) {
    margin: 0; /* NOTE: remove `margin: 2px` Safari user agent */
    padding-block-start: 0.25rem;
    padding-block-end: 0.25rem;
    padding-inline-start: 1rem;
    padding-inline-end: 1rem;
    background-color: var(--sl-color-bg);
    border-width: 1px;
    border-style: solid;
    border-color: var(--sl-color-gray-6);
    border-radius: 1rem;
  }

  label {
    display: inline-block;
    padding-block-start: 0.25rem;
    padding-block-end: 0.25rem;
  }

  [class*="elements"] {
    display: flex;
    align-items: start;

    > label {
      display: inline-block;
      font-weight: 500;
      min-width: 8rem;
    }

    > input,
    > textarea {
      flex: 1 1 auto;

      &:focus-visible {
        outline-color: var(--sl-color-gray-5);
      }
    }
  }

  .radio-element {
    display: inline-block;
    margin-inline-end: 1rem;

    &:last-of-type {
      margin-inline-end: 0;
    }

    label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
    }

    input {
      width: 1rem;
      height: 1rem;
    }
  }

  textarea {
    font-size: 0.85rem;
    font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,'Liberation Mono','Courier New',monospace;
    padding-block: 0.36278125rem !important;
    resize: vertical;
  }
}
</style>
