---
import '/node_modules/@astrojs/starlight/style/props.css';
import '/node_modules/@astrojs/starlight/style/reset.css';
import '/node_modules/@astrojs/starlight/style/shiki.css';
import '/node_modules/@astrojs/starlight/style/util.css';
import '../../../../../styles/custom.css';
import ExampleConfigure from '../../../../../components/ExampleConfigure.astro';
import { customElements } from '../../../../../scripts/custom-elements';

const { component, type } = Astro.params;
const { allTagNames } = Astro.props;
const exampleFileMatcher = `/assets/components/${component}/${type}.html`;

const examples = import.meta.glob(
  "../../../../../assets/components/**/*.html",
  { import: "default", as: "raw", eager: true },
);
const htmlFile = Object.keys(examples).find((example) =>
  example?.endsWith(exampleFileMatcher),
);
const htmlContent = await examples[htmlFile];

export function getStaticPaths() {
  const examples = import.meta.glob(
    "../../../../../assets/components/**/*.html",
  );
  const getComponentExample = (fileMatcher) => {
    return Object.keys(examples)?.filter((example) => example.indexOf(fileMatcher) > -1); 
  };

  const allNames = customElements.tags
    .map((tag) => {
      return tag.name;
    })
    .sort((a, b) => a.localeCompare(b));

  return customElements.tags.flatMap((tag) => {
    const componentName = tag.name;
    const exampleComponentMatcher = `/assets/components/${componentName}/`;
    const componentExamples = getComponentExample(exampleComponentMatcher);
    if (componentExamples) {
      return componentExamples.map((componentExample) => {
        const type = componentExample?.split(exampleComponentMatcher)[1].replaceAll(".html", "");
        return {
          params: {
            component: tag.name,
            type,
          },
          props: {
            allTagNames: allNames,
          },
        };
      });
    } else {
      return {
        params: {
          component: tag.name,
          type: 'standard',
          allTagNames,
        },
      };
    }
  });
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Configurator</title>
  </head>
  <script is:inline>
    // Copied from @astrojs/starlight/components/ThemeProvider.astro
    // To set the theme based on localStorage or prefers-color-scheme preference
    (() => {
      const storedTheme =
        typeof localStorage !== 'undefined' && localStorage.getItem('starlight-theme');
      const theme =
        storedTheme ||
        (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
      document.documentElement.dataset.theme = theme === 'light' ? 'light' : 'dark';
    })();
  </script>
  <body>
    <header>
      <div class="header">
        <a href="/" class="logo"></a>
        <div class="name">
          <h1>&lt;{component}&gt;</h1>
        </div>
      </div>
    </header>
    <main class="configurator">
      <div class="action">
        <span>
          <a class="button secondary back" href=`/components/${component}`
            >Back to {component} documentation</a
          >
        </span>

        <div class="options">
          <label for="component">Components</label>
          <select id="component">
            {
              allTagNames.map((tagName) => (
                <option selected={tagName === component}>{tagName}</option>
              ))
            }
          </select>
        </div>
      </div>
      <ExampleConfigure componentName={component} src={htmlContent}>
        <Fragment set:html={htmlContent} />
      </ExampleConfigure>
    </main>

    <style>
      header {
        height: var(--sl-nav-height);
        border-bottom: 1px solid var(--sl-color-hairline-shade);
        padding-block-start: var(--sl-nav-pad-y);
        padding-block-end: var(--sl-nav-pad-y);
        padding-inline-start: var(--sl-nav-pad-x);
        padding-inline-end: var(--sl-nav-pad-x);
        background-color: var(--sl-color-bg-nav);

        .header {
          position: relative;
          display: grid;
          height: calc(var(--sl-nav-height) - var(--sl-nav-pad-y) * 2);

          .logo {
            position: absolute;
            top: 0;
            bottom: 0;
            background-image: var(--ns-logo-homepage);
            background-size: cover;
            aspect-ratio: 245 / 44;
          }

          .name {
            grid-column: 3 / -1;
            text-align: right;

            h1 {
              font-weight: 400;
              font-size: var(--sl-text-3xl);
              font-family: menlo, monospace;
            }
          }
        }
      }

      .config-content {
        display: none;
      }

      .configurator {
        display: grid;
        grid-template-columns: repeat(2, minmax(0, 1fr));
        gap: 2rem;
        padding-inline-start: 5%;
        padding-inline-end: 5%;
        padding-block-start: 2rem;
        padding-block-end: 2rem;

        .action {
          display: flex;
          grid-column: 1 / -1;
          align-items: center;
          justify-content: space-between;

          > span {
            display: inline-flex;
            justify-content: end;
            gap: 1em;
            align-items: center;
          }

          .options {
            select {
              padding: 0.5em;
              border: 1px solid var(--sl-color-hairline-shade);
              border-radius: 0.25em;
              background-color: var(--sl-color-bg-nav);
              color: var(--sl-color-primary-500);
            }
          }
        }
      }

      @media (width <= 75rem) {
        .configurator {
          grid-template-columns: 1fr;
          padding-inline-start: 1rem;
          padding-inline-end: 1rem;

          .action {
            flex-direction: column;
            gap: 1rem;
            align-items: start;
          }
        }

        .form,
        example-view {
          max-width: calc(100vw - 2rem);
        }
      }
    </style>
    <script>
      document.querySelector("select").addEventListener("change", (event) => {
        const selectedComponent = event.target.value;
        window.location.href = `/configure/components/${selectedComponent}/standard`;
      });
    </script>
  </body>
</html>
